# python 3.62
# utf8


class tikus():

    def __init__(self):
        # vim快捷键
        self.vimkey = {
            '保存并退出': ':wq',
            '删除光标位置字符': 'x',
            '换上行插入': 'O',
            '换下行插入': 'o',
            '插入光标前': 'i',
            '插入光标后': 'a',
            '移动至行尾,可加数字': '$',
            '移动至行头': '0',
            '移动至行头非空白位置': '^',
            '向右单字符搜索移动，可加数字，可加‘；’‘，反’重复，不可跳行。': 'f',
            '向左单字符搜索移动，可加数字，可加‘；’‘，反’重复，不可跳行。': 'F',
            '向右单字符搜索移动，可加数字，可加‘；’‘，反’重复，不可跳行。': 't',
            '向左单字符搜索移动，可加数字，可加‘；’‘，反’重复，不可跳行。': 'T',
            '移动至一个括号相互匹配的括号上,可加数字跳转至指定百分比位置。': '%',
            '跳转至最后一行,可加数字跳转至指定行': 'G',
            '跳转至第一行': 'gg',
            '跳转至屏幕上中下': 'H,M,L',
            '设置行号，前加no取消行号': ':set number',
            '获得行号和全文百分比': 'ctrl+G',
            '滚半屏': 'ctrl+D,U',
            '滚一行': 'ctrl+E,Y',
            '滚全屏': 'ctrl+F,B',
            '简单查找，特殊字符用\\,下一个按‘n’跳转至下一个,反向输入‘？’后按n，‘N’为返回前一次查找': '/',
            '快速获取光标处单词查找,反向为#': '*',
            '简单查找的精确限制符': '/\\<单词\\>',
            '忽略简单查找大小写,重置前加no': ':set ignorecase',
            '返回编辑模式': 'Esc',
            '删除一整行': 'dd',
            '上下两行合并为一行': 'J',
            '撤销': 'u',
            '反撤销': 'ctrl+r',
            '整行操作撤销，二次操作反整行操作撤销': 'U',
            '保存当前文件并退出': 'ZZ',
            '光标位置处于屏幕居中,顶端，尾端': 'zz,zt,zb',
            '不保存当前文件退出': ':q!',
            '向前移动下一个word位置的首字符上': 'w',
            '向后移动上一个word位置的首字符上': 'b',
            '向前移动下一个word位置的末字符上': 'e',
            '向后移动上一个word位置的末字符上': 'ge',
            '大写word移动': 'W,B,E,gE'
        }

        # 正则表达式
        self.zenzecodes = {
            '任意字符，除了\\n': '.',
            '转义符': '\\',
            '字符集,对应的位置可以是字符集中的任意字符。开头^表示取反。': '[]',
            '数字[0-9]': '\\d',
            '非数字': '\\D',
            '空白字符[空格\\t\\r\\n\\f\\v]': '\\s',
            '非空白字符': '\\S',
            '单词字符[A-Za-z0-9]': '\\w',
            '非单词字符': '\\W',
            '匹配前一个字符0或无限次': '*',
            '匹配前一个字符1或无限次': '+',
            '匹配前一个字符0或1次': '?',
            '匹配前一个字符m次': '{m}',
            '匹配前一个字符m至n次': '{m,n}',
            '使* + ?{m,n}变成非贪婪模式': '*?+??? {m,n}?',
            '匹配字符串开头，多行模式中匹配每一行开头': '^',
            '匹配字符串末尾，多行模式中匹配每一行末尾': '$',
            '仅匹配字符串开头': '\\A',
            '仅匹配字符串结尾': '\\Z',
            '匹配不是单词和非单词字符的字符': '\\b',
            '单词字符和非单词字符': '\B',
            '从左边开始，匹配左边或右边，无()则范围是整个表达式': '|',
            '作为分组，可后接数量词，|在该组有效': '()',
            '分组，除了原有的编号外再指定一个额外的别名。': '(?P<name>...)',
            '引用编号为<number>的分组匹配到的字符串': '\<number>',
            '引用别名为<name>的分组匹配到的字符串': '(?P=name)',
            '(...)的 不分组版本，用于使用‘|’或后接数量词。': '(?...)',
            'iLmsux的每个字符代表一个匹配模式，只能用在正则的开头，可选多个。': '(?iLmsux)',
            '#后的内容将被作为注释忽略掉。': '(?#...)',
            '之后的字符串内容需要匹配表达式才能成功匹配。不消耗字符串内容。': '(?=...)',
            '之后的字符串内容需要不匹配表达式才能成功匹配。不消耗字符串内容。': '(?!...)',
            '之前的字符串内容需要匹配表达式才能成功匹配。不消耗字符串内容。': '(?<=...)',
            '之前的字符串内容需要不匹配表达式才能成功匹配。不消耗字符串内容。': '(?<!...)',
            '如果编号为id别名为name的组匹配到字符，则需要匹配yes-pattern,否则需要匹配no-pattern。|no-patern可以省略': '(?(id/name)yes-pattern|no-patern)',
        }

        # python3.62内置函数
        self.python_neizhihanshu = {
            '求数值的绝对值': 'abs()',
            '返回两个数值的商和余数': 'divmod()',
            '最大值': 'max()',
            '最小值': 'min()',
            '返回一个数字的n次方值': 'pow()',
            '对元素类型是数值的可迭代对象中的每个元素求和 ': 'sum()',
            '对浮点数进行四舍五入求值 ': 'round()',
            '布尔值 ': 'bool()',
            '整数': 'int()',
            '浮点': 'float()',
            '复数': 'complex()',
            '字符串': 'str()',
            '字节数组': 'bytearray()',
            '不可变字节数组': 'bytes()',
            '创建新的内存查看对象': 'memoryview()',
            '返回Unicode字符对应的整数': 'ord()',
            '返回整数所对应的Unicode字符': 'chr()',
            '将整数转换成2进制字符串': 'bin()',
            '将整数转换成8进制字符串': 'oct()',
            '将整数转换成16进制字符串': 'hex()',
            '元组': 'tuple()',
            '列表': 'list()',
            '字典': 'dict()',
            '集合': 'set()',
            '不可变集合': 'frozenset()',
            '根据可迭代对象创建枚举对象': 'enumerate()',
            '创建有序整数集合，可步进': 'range()',
            '根据传入的参数创建一个新的可迭代对象': 'iter()',
            '根据传入的参数创建一个新的切片对象': 'slice()',
            '根据传入的参数创建一个新的子类和父类关系的代理对象': 'super()',
            '所有类的基类': 'object',
            '判断可迭代对象的每个元素是否都为True值（0，空，False）': 'all()',
            '判断可迭代对象的元素是否有为True值的元素（0，空，False）': 'any()',
            '使用指定方法过滤可迭代对象的元素': 'filter()',
            '使用指定方法去作用传入的每个可迭代对象的元素，生成新的可迭代对象': 'map()',
            '返回可迭代对象中的下一个元素值 ': 'next()',
            '反转序列生成新的可迭代对象': 'reversed()',
            '对可迭代对象进行排序，返回一个新的列表': 'sorted()',
            '聚合传入的每个迭代器中相同位置的元素，返回一个新的元组类型迭代器': 'zip()',
            '返回对象或者当前作用域内的属性列表': 'dir()',
            '返回对象的唯一标识符': 'id()',
            '获取对象的哈希值': 'hash()',
            '返回对象的类型，或者根据传入的参数创建一个新的类型': 'type()',
            '返回对象长度': 'len()',
            '返回对象的可打印表字符串表现方式': 'ascii()',
            '格式化显示值': 'format()',
            '返回当前作用域内的局部变量和其值组成的字典，或者返回对象的属性列表': 'vars()',
            '动态导入模块': 'import',
            '判断对象是否是类或者类型元组中任意类元素的实例': 'isinstance()',
            '判断类是否是另外一个类或者类型元组中任意类元素的子类': 'issubclass()',
            '检查对象是否含有属性': 'hasattr()',
            '获取对象的属性': 'getattr()',
            '设置对象的属性': 'setattr()',
            '删除对象的属性': 'delattr()',
            '检查对象是否可以被调用': 'callable()',
            '返回当前作用域内的全局变量和其值组成的字典': 'globals()',
            '返回当前作用域内的局部变量和其值组成的字典': 'locals()',
            '解释器输出': 'print()',
            '向解释器输入': 'input()',
            '使用指定的模式和编码打开文件，返回文件读写对象': 'open()',
            '将字符串编译为代码或者AST对象，使之能够通过exec语句来执行或者eval进行求值': 'compile()',
            '执行动态表达式求值': 'eval()',
            '执行动态语句块': 'exec()',
            '返回一个对象的字符串表现形式(给解释器)': 'repr()',
            '属性装饰器': '@property',
            '类方法装饰器': '@classmethod',
            '静态方法装饰器': '@staticmethod',
        }

        # 内置方法
        self.python_fangfa = {
            '初始化对象': '__init__(self,...)',
            '释放对象': '__del__(self)',
            '实例的生成操作': '__new__()',
            '在使用print语句时被调用': '__str__(self)',
            '获取序列的索引key对应的值，等价于seq[key]': '__getitem__(self,key)',
            '调用len()时被调用': '__len__(self)',
            '比较两个对象src和dst': '__cmp__(stc,dst)',
            '获取属性的值': '__getattr(s,name)',
            '设置属性的值': '__setattr(s,name,value)',
            '删除name属性': '__delattr__(s,name)',
            '于__getattr__()功能类似': '__getattribute__()',
            '判断self对象是否大于other对象': '__gt__(self,other)',
            '判断self对象是否小于other对象': '__lt__(self,other)',
            '判断self对象是否大于等于other对象': '__ge__(self,other)',
            '判断self对象是否小于等于other对象': '__le__(self,other)',
            '判断self对象是否等于other对象': '__eq__(self,other)',
            '把实例对象作为函数调用': '__call__(self,*args)',
        }

        # 内置模块
        self.python_neizhimodle = {
            '密码掩码和显示当前系统登录名模块': 'getpass',
            '操作操作系统模块': 'os',
            '操作解释器模块': 'sys',
            '执行系统命令，进程管理模块': 'subprocess',
            '生成随机数模块': 'random',
            '时间模块,计时': 'time',
            '高级时间模块,处理日期和时间的标准库': 'datetime',
            '读写Excel文件模块': 'xlrd',
            '汉子转拼音模块': 'xpinyin',
            '操作图像模块': 'lmage',
            '哈希加密模块': 'hashlib',
            '序列化模块,用于字符串和python数据类型间转换': 'json',
            '序列化模块，用于python特有类型和python数据类型间转换': 'ickle',
            '创建压缩包并返回文件路径模块': 'shutil',
            '正则表达式模块': 're',
            '用于对特定配置进行操作的模块': 'configparser',
            '处理异常模块': 'tracebace',
            'yaml在python上的具体实现：pyyaml': 'yaml',
            '迭代模块': 'itertools',
            '用于便捷记录日志且线程安全的模块': 'logging',
            'Python内建的一个集合模块，提供了许多有用的集合类': 'collections',
            '用64个字符来表示任意二进制数据的模块': 'base64',
            '解决str和其他二进制数据类型的转换的模块': 'struct',
            '解析XML的模块': 'XML',
            '解析HTML的模块，为xml的子集': 'HTMLParser',
            '提供了一系列用于操作URL的功能。': 'urllib',
            '优化with的模块,轻松实现把任意对象变为上下文对象。': 'contextlib',
            '通过一个标准算法，在计算哈希的过程中，把key混入计算过程中。用以增加哈希的安全。': 'hmac',
            '能够轻松实现获取系统运行的进程和系统利用率（包括CPU、内存、磁盘、网络等）信息。它主要应用于系统监控，分析和限制系统资源及进程的管理': 'psutil',
        }
        # 内置模块进阶
        self.neizhimodle_jingjie = {
            'getpass中提示用户输入一段密码': 'getpass.getpass()',
            'getpass中返回用户登录名': 'getpass.getuser()',
            'os中获取当前工作目录，即当前python脚本工作的目录路径': 'os.getcwd()',
            'os中改变当前脚本工作目录；相当于shell下cd': 'os.chdir("dirname")',
            'os中返回当前目录: ': 'os.curdir',
            'os中': '',
            'os中': '',
            'os中': '',
            'os中': '',
            'os中': '',
            'os中': '',
            'os中': '',
            'os中': '',
            'os中': '',
            'os中': '',
            'os中': '',
            'os中': '',
            'os中': '',
            'os中': '',
            'os中': '',
            'os中': '',
            'os中': '',
            'os中': '',
            'os中': '',
            'os中': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
        }
        # 小范围测试用
        self.xiaofanwei1 = {
            '求数值的绝对值': 'abs()',
            '返回两个数值的商和余数': 'divmod()',
            '最大值': 'max()',
            '最小值': 'min()',
            '返回一个数字的n次方值': 'pow()',
            '对元素类型是数值的可迭代对象中的每个元素求和 ': 'sum()',
            '对浮点数进行四舍五入求值 ': 'round()',
            '布尔值 ': 'bool()',
            '整数': 'int()',
            '浮点': 'float()',
            '复数': 'complex()',
            '字符串': 'str()',
            '字节数组': 'bytearray()',
            '不可变字节数组': 'bytes()',
            '创建新的内存查看对象': 'memoryview()',
            '返回Unicode字符对应的整数': 'ord()',
            '返回整数所对应的Unicode字符': 'chr()',
            '将整数转换成2进制字符串': 'bin()',
            '将整数转换成8进制字符串': 'oct()',
            '将整数转换成16进制字符串': 'hex()',
            '元组': 'tuple()',
            '列表': 'list()',
            '字典': 'dict()',
            '集合': 'set()',
            '不可变集合': 'frozenset()',
            '根据可迭代对象创建枚举对象': 'enumerate()',
            '创建有序整数集合，可步进': 'range()',
            '根据传入的参数创建一个新的可迭代对象': 'iter()',
            '根据传入的参数创建一个新的切片对象': 'slice()',
            '根据传入的参数创建一个新的子类和父类关系的代理对象': 'super()',
            '所有类的基类': 'object',
            '判断可迭代对象的每个元素是否都为True值（0，空，False）': 'all()',
            '判断可迭代对象的元素是否有为True值的元素（0，空，False）': 'any()',
            '使用指定方法过滤可迭代对象的元素': 'filter()',
            '使用指定方法去作用传入的每个可迭代对象的元素，生成新的可迭代对象': 'map()',
            '返回可迭代对象中的下一个元素值 ': 'next()',
            '反转序列生成新的可迭代对象': 'reversed()',
            '对可迭代对象进行排序，返回一个新的列表': 'sorted()',
            '聚合传入的每个迭代器中相同位置的元素，返回一个新的元组类型迭代器': 'zip()',
            '返回对象或者当前作用域内的属性列表': 'dir()',
            '返回对象的唯一标识符': 'id()',
            '获取对象的哈希值': 'hash()',
            '返回对象的类型，或者根据传入的参数创建一个新的类型': 'type()',
            '返回对象长度': 'len()',
            '返回对象的可打印表字符串表现方式': 'ascii()',
            '格式化显示值': 'format()',
            '返回当前作用域内的局部变量和其值组成的字典，或者返回对象的属性列表': 'vars()',
            '动态导入模块': 'import',
            '判断对象是否是类或者类型元组中任意类元素的实例': 'isinstance()',
            '判断类是否是另外一个类或者类型元组中任意类元素的子类': 'issubclass()',
            '检查对象是否含有属性': 'hasattr()',
            '获取对象的属性': 'getattr()',
            '设置对象的属性': 'setattr()',
            '删除对象的属性': 'delattr()',
            '检查对象是否可以被调用': 'callable()',
            '返回当前作用域内的全局变量和其值组成的字典': 'globals()',
            '返回当前作用域内的局部变量和其值组成的字典': 'locals()',
            '解释器输出': 'print()',
            '向解释器输入': 'input()',
            '使用指定的模式和编码打开文件，返回文件读写对象': 'open()',
            '将字符串编译为代码或者AST对象，使之能够通过exec语句来执行或者eval进行求值': 'compile()',
            '执行动态表达式求值': 'eval()',
            '执行动态语句块': 'exec()',
            '返回一个对象的字符串表现形式(给解释器)': 'repr()',
            '属性装饰器': '@property',
            '类方法装饰器': '@classmethod',
            '静态方法装饰器': '@staticmethod',
        }
        #pytnon关键字
        self.keyword = {
            '假': 'False',
            '无': 'None',
            '无的类型': 'NoneType',
            '真': 'True',
            '用于表达式运算，逻辑与操作': 'and',
            '断言，用于判断变量或者条件表达式的值是否为真': 'assert',
            '中断循环语句的执行': 'break',
            '用于定义类': 'class',
            '跳出本次循环，继续执行下一次循环': 'continue',
            '用于定义函数或方法': 'def',
            '删除变量或序列的值': 'del',
            '分支条件语句组合': 'if elif else',
            '异常：执行可能异常语句，拦截指定异常，拦截意外异常,抛出异常,清理异常模块': 'try except else raise finally',
            '自定义异常': 'exception',
            '遍历循环语句': 'for',
            '用于导入模块具体函数的组合': 'from import',
            '定义全局变量': 'global',
            '判断变量是否在序列中': 'in',
            '判断变量是否为某个类的实例': 'is',
            '定义匿名函数': 'lambda',
            '用于标识外部作用域的变量': 'nonlocal',
            '用于表达式运算，逻辑非操作': 'not',
            '用于表达式运算，逻辑或操作': 'or',
            '空的类、方法或函数的占位符': 'pass',
            '用于从函数返回计算结果': 'return',
            '条件循环语句': 'while',
            '简化try…finally语句，实现一个类_enter_()和_exit_()方法': 'with as',
            '用于从函数返回生成器': 'yield',
        }
        # git命令
        self.gitcommand = {
            '全局配置（只要设置一次)': 'git config --global <>',
            '查看全局配置内容': 'git config --list',
            '查看单一全局配置内容': 'git config <>',
            '在现有目录中初始化仓库': 'git init',
            '在现有目录中跟踪的文件': 'git add <>',
            '跟踪后提交': 'git commit -m ""',
            '克隆网络已有仓库到现有目录(想自定义本地名）': 'git clone [url](<>)',
            '检查当前文件状态': 'git status',
            '检查修改了什么': 'git diff',

        }
        # 各种英语单词
        self.compile_english = {
            '全局,总体的': 'global',
            '配置': 'config',
            '克隆': 'clone',
            '设计；计划；表达；投射': 'project',
            '到…里': 'into',
            '远程': 'remote',
            '计算，计数': 'count',
            '目标；物体': 'object',
            '完成': 'done',
            '再用；重复利用,重用': 'reused',
            '包装': 'pack',
            '拆包': 'unpack',
            '校验，核对': 'check',
            '连通性': 'connectivity',
            '建立一个新的子目录': 'mkdir',
            '初始化': 'initialized',
            '仓库': 'repository',
            '空的': 'empty',
            '分支': 'branch',
            ' 描述，描写；类型；说明书': 'description',
            '挂钩': 'hook',
            '信息，情报': 'info',
            '指标；指数；索引；指针': 'index',
            '添加': 'add',
            '把...交托给；指派…作战': 'commit',
            '推动，增加': 'push',
            '接触；触动': 'touch',
            '反射；重复': 'echo',
            '地位；状态；情形': 'status',
            '最初的；字首的': 'initial',
            '无足迹的；无路径的': 'untracked',
            '改变；交换': 'change',
            '差速器': 'diff',
            '贮藏起来；隐藏起来': 'cached',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
        }
        self.mysql = {
            '在Linux控制台中打开MySQL服务': 'sudo service mysql start',
            '在Linux控制台中使用root用户登录': 'mysql -u root',
            '':'',
            '新建数据库': 'CREATE DATABASE;',
            '连接数据库': 'USE;',
            '新建表': 'CREATE TABLE name(,);',
            '': 'tinyint',
            '': 'smallint',
            '': 'mediumint',
            'MYSQL数据类型的整数': 'int',
            '': 'bigint',
            'MYSQL数据类型的单精度浮点': 'float',
            'MYSQL数据类型的双精度浮点': 'double',
            '': 'decimal',
            '': 'unsigned',
            '': 'zerofill',
            'MYSQL数据类型的单选': 'enum',
            'MYSQL数据类型的多选': 'set',
            'MYSQL数据类型的日期': 'date',
            'MYSQL数据类型的时间': 'time',
            'MYSQL数据类型的年份': 'year',
            'MYSQL数据类型的定长字符串': 'char',
            'MYSQL数据类型的变长字符串': 'varchar',
            '': 'tinyblob',
            '': 'tinytext',
            '': 'blob',
            'MYSQL数据类型的长文本数据': 'text',
            '': 'mediumblob',
            '': 'mediumtext',
            '': 'longblob',
            '': 'longtext',
            '查看表内容': 'select * from;',
            '向表插入数据': 'insert into () values();',
            '主键': 'primary key',
            '默认': 'default',
            '唯一': 'unique',
            '外键': 'foreign key',
            '非空': 'not null',
            '约束': 'constraint',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
        }
        self.pycharmview = {
            '': 'edit',
            '': 'view',
            '': 'navigate',
            '': 'refactor',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
            '': '',
        }
