            
内置函数：
            '求数值的绝对值': 'abs()',
            '返回两个数值的商和余数': 'divmod()',
            '最大值': 'max()',
            '最小值': 'min()',
            '返回一个数字的n次方值': 'pow()',
            '对元素类型是数值的可迭代对象中的每个元素求和 ': 'sum()',
            '对浮点数进行四舍五入求值 ': 'round()',
            '布尔值 ': 'bool()',
            '整数': 'int()',
            '浮点': 'float()',
            '复数': 'complex()',
            '字符串': 'str()',
            '字节数组': 'bytearray()',
            '不可变字节数组': 'bytes()',
            '创建新的内存查看对象': 'memoryview()',
            '返回Unicode字符对应的整数': 'ord()',
            '返回整数所对应的Unicode字符': 'chr()',
            '将整数转换成2进制字符串': 'bin()',
            '将整数转换成8进制字符串': 'oct()',
            '将整数转换成16进制字符串': 'hex()',
            '元组': 'tuple()',
            '列表': 'list()',
            '字典': 'dict()',
            '集合': 'set()',
            '不可变集合': 'frozenset()',
            '根据可迭代对象创建枚举对象': 'enumerate()',
            '创建有序整数集合，可步进': 'range()',
            '根据传入的参数创建一个新的可迭代对象': 'iter()',
            '根据传入的参数创建一个新的切片对象': 'slice()',
            '根据传入的参数创建一个新的子类和父类关系的代理对象': 'super()',
            '所有类的基类': 'object',
            '判断可迭代对象的每个元素是否都为True值（0，空，False）': 'all()',
            '判断可迭代对象的元素是否有为True值的元素（0，空，False）': 'any()',
            '使用指定方法过滤可迭代对象的元素': 'filter()',
            '使用指定方法去作用传入的每个可迭代对象的元素，生成新的可迭代对象': 'map()',
            '返回可迭代对象中的下一个元素值 ': 'next()',
            '反转序列生成新的可迭代对象': 'reversed()',
            '对可迭代对象进行排序，返回一个新的列表': 'sorted()',
            '聚合传入的每个迭代器中相同位置的元素，返回一个新的元组类型迭代器': 'zip()',
            '返回对象或者当前作用域内的属性列表': 'dir()',
            '返回对象的唯一标识符': 'id()',
            '获取对象的哈希值': 'hash()',
            '返回对象的类型，或者根据传入的参数创建一个新的类型': 'type()',
            '返回对象长度': 'len()',
            '返回对象的可打印表字符串表现方式': 'ascii()',
            '格式化显示值': 'format()',
            '返回当前作用域内的局部变量和其值组成的字典，或者返回对象的属性列表': 'vars()',
            '动态导入模块': 'import',
            '判断对象是否是类或者类型元组中任意类元素的实例': 'isinstance()',
            '判断类是否是另外一个类或者类型元组中任意类元素的子类': 'issubclass()',
            '检查对象是否含有属性': 'hasattr()',
            '获取对象的属性': 'getattr()',
            '设置对象的属性': 'setattr()',
            '删除对象的属性': 'delattr()',
            '检查对象是否可以被调用': 'callable()',
            '返回当前作用域内的全局变量和其值组成的字典': 'globals()',
            '返回当前作用域内的局部变量和其值组成的字典': 'locals()',
            '解释器输出': 'print()',
            '向解释器输入': 'input()',
            '使用指定的模式和编码打开文件，返回文件读写对象': 'open()',
            '将字符串编译为代码或者AST对象，使之能够通过exec语句来执行或者eval进行求值': 'compile()',
            '执行动态表达式求值': 'eval()',
            '执行动态语句块': 'exec()',
            '返回一个对象的字符串表现形式(给解释器)': 'repr()',
            '属性装饰器': '@property',
            '类方法装饰器': '@classmethod',
            '静态方法装饰器': '@staticmethod',

# 正则表达式
        self.zenzecodes = {
            '任意字符，除了\\n': '.',
            '转义符': '\\',
            '字符集,对应的位置可以是字符集中的任意字符。开头^表示取反。': '[]',
            '数字[0-9]': '\\d',
            '非数字': '\\D',
            '空白字符[空格\\t\\r\\n\\f\\v]': '\\s',
            '非空白字符': '\\S',
            '单词字符[A-Za-z0-9]': '\\w',
            '非单词字符': '\\W',
            '匹配前一个字符0或无限次': '*',
            '匹配前一个字符1或无限次': '+',
            '匹配前一个字符0或1次': '?',
            '匹配前一个字符m次': '{m}',
            '匹配前一个字符m至n次': '{m,n}',
            '使* + ?{m,n}变成非贪婪模式': '*?+??? {m,n}?',
            '匹配字符串开头，多行模式中匹配每一行开头': '^',
            '匹配字符串末尾，多行模式中匹配每一行末尾': '$',
            '仅匹配字符串开头': '\\A',
            '仅匹配字符串结尾': '\\Z',
            '匹配不是单词和非单词字符的字符': '\\b',
            '单词字符和非单词字符': '\B',
            '从左边开始，匹配左边或右边，无()则范围是整个表达式': '|',
            '作为分组，可后接数量词，|在该组有效': '()',
            '分组，除了原有的编号外再指定一个额外的别名。': '(?P<name>...)',
            '引用编号为<number>的分组匹配到的字符串': '\<number>',
            '引用别名为<name>的分组匹配到的字符串': '(?P=name)',
            '(...)的 不分组版本，用于使用‘|’或后接数量词。': '(?...)',
            'iLmsux的每个字符代表一个匹配模式，只能用在正则的开头，可选多个。': '(?iLmsux)',
            '#后的内容将被作为注释忽略掉。': '(?#...)',
            '之后的字符串内容需要匹配表达式才能成功匹配。不消耗字符串内容。': '(?=...)',
            '之后的字符串内容需要不匹配表达式才能成功匹配。不消耗字符串内容。': '(?!...)',
            '之前的字符串内容需要匹配表达式才能成功匹配。不消耗字符串内容。': '(?<=...)',
            '之前的字符串内容需要不匹配表达式才能成功匹配。不消耗字符串内容。': '(?<!...)',
            '如果编号为id别名为name的组匹配到字符，则需要匹配yes-pattern,否则需要匹配no-pattern。|no-patern可以省略': '(?(id/name)yes-pattern|no-patern)',
#内置关键字
 self.keyword = {
            '假': 'False',
            '无': 'None',
            '无的类型':'NoneType',
            '真': 'True',
            '用于表达式运算，逻辑与操作': 'and',
            '用于类型转换': 'as',
            '断言，用于判断变量或者条件表达式的值是否为真': 'assert',
            '中断循环语句的执行': 'break',
            '用于定义类': 'class',
            '跳出本次循环，继续执行下一次循环': 'continue',
            '用于定义函数或方法': 'def',
            '删除变量或序列的值': 'del',
            '分支条件语句组合': 'if elif else',
            '异常：执行异常语句，拦截指定异常，拦截意外异常,清理': 'try except else finally',
            '抛出异常': 'raise',
            '自定义异常': 'exception',
            '遍历循环语句': 'for',
            '用于导入模块的组合': 'import from',
            '定义全局变量': 'global',
            '判断变量是否在序列中': 'in',
            '判断变量是否为某个类的实例': 'is',
            '定义匿名函数': 'lambda',
            '用于标识外部作用域的变量': 'nonlocal',
            '用于表达式运算，逻辑非操作': 'not',
            '用于表达式运算，逻辑或操作': 'or',
            '空的类、方法或函数的占位符': 'pass',
            '用于从函数返回计算结果': 'return',
            '条件循环语句': 'while',
            '简化 Python 的语句': 'with',
            '用于从函数依次返回值': 'yield',
#vim快捷键
全局

    :help keyword - 打开关键字帮助
    :o file - 打开文件
    :saveas file - 另存为
    :close - 关闭当前窗口
    K - 打开man页面，用于在游标下的单词。

光标

    h - 左移光标
    j - 下移光标
    k - 上移光标
    l - 右移光标
    H - 移动到当前页面顶部
    M - 移动到当前页面中间
    L - 移动到当前页面底部
    w - 移动到下个单词开头
    W - 移动到下个单词开头(单词含标点)
    e - 移动到下个单词结尾
    E - 移动到下个单词结尾(单词含标点)
    b - 移动到上个单词结尾
    B - 移动到上个单词结尾(单词含标点)
    % - 括号对移动 (默认: '()', '{}', '[]')
    0 - 移动到行首
    ^ - 移动到行首的非空白符
    $ - 移动到行尾
    g_ - 移动到行内最后一个非空白符
    gg - 移动到文件第一行
    G - 移动到文件最后一行
    5G - 移动到第五行
    fx - 移动到字符 x 下次出现的位置
    tx - 移动到字符 x 下次出现的位置的前一个字符
    Fx - 跳转到之前的字符x
    Tx - 跳转到上一个字符x前面的字符
    ; - 继续跳转f,t,F,T
    , - ;的返回
    } - 移动到下一个段落 (当编辑代码时则为函数／代码块)
    { - 移动到上一个段落 (当编辑代码时则为函数／代码块)
    zz - 移动屏幕使光标居中
    Ctrl + e - 向后滚一行
    Ctrl + y - 向前滚一行
    Ctrl + b - 向后滚动一屏
    Ctrl + f - 向前滚动一屏
    Ctrl + d - 向前滚动半屏
    Ctrl + u - 向后滚动半屏

Tip 命令前追加数字表示命令的重复次数, 比如 4j 表示向下移动四行
插入模式 - 插入/追加文本

    i - 从光标前开始插入字符
    I - 从行首开始插入字符
    a - 从光标后开始插入字符
    A - 从行尾开始插入字符
    o - 在当前行之下另起一行, 开始插入字符
    O - 在当前行之上另起一行, 开始插入字符
    ea - 从当前单词末尾开始插入
    Esc - 退出插入模式

编辑

    r - 替换当前字符
    J - 将下一行合并到当前行
    gJ - 连接下面的线到当前的一个没有空格的中间。
    cc - 清空当前行, 然后进入插入模式
    cw - 从光标位置开始, 修改单词
    c$ - 从光标位置开始, 修改当前行
    s - 删除当前字符, 然后进入插入模式
    S - 清空当前行, 然后进入插入模式 (同cc)
    xp - 当前字符后移
    u - 撤销
    Ctrl + r - 重复
    . - 再次执行上个命令

选择文本（可视化模式）

    v - 进入可视化模式, 移动光标高亮选择, 然后可以对选择的文本执行命令(比如y-复制)
    V - 进入可视化模式(行粒度选择)
    o - 切换光标到选择区开头/结尾
    Ctrl + v - 进入可视化模式(矩阵选择)
    O - 切换光标到选择区的角
    aw - 选择当前单词
    ab - 选择被 () 包裹的区域(含括号)
    aB - 选择被 {} 包裹的区域(含花括号)
    ib - 选择被 () 包裹的区域(不含括号)
    iB - 选择被 {} 包裹的区域(不含花括号)
    Esc - 退出可视化模式

可视化模式命令

    > - 向右缩进
    < - 向左缩进
    y - 复制
    d - 剪切
    ~ - 大小写切换

寄存器

    :reg - 显示寄存器内容
    "xy - 复制内容到寄存器 x
    "xp - 粘贴寄存器 x 中的内容

Tip 寄存器被存储在 ~/.viminfo 中, 在下次重启vim时仍会加载
Tip 寄存器 0 存储上一次复制的值
标记

    :marks - 标记列表
    ma - 设置当前位置为标记 a
    `a - 跳转到标记 a 的位置
    y`a - 复制当前位置到标记 a 的内容

宏

    qa - 录制宏 a
    q - 停止录制宏
    @a - 执行宏 a
    @@ - 重新执行上次执行的宏

剪切, 复制, 粘贴

    yy - 复制当前行
    2yy - 复制 2 行
    yw - 复制当前单词
    y$ - 复制, 从光标位置到行末
    p - 在光标后粘贴
    P - 在光标前粘贴
    dd - 剪切当前行
    2dd - 剪切 2 行
    dw - 剪切当前单词
    D - 剪切, 从光标位置到行末
    d$ - 剪切, 从光标位置到行末 (同D)
    x - 剪切当前字符

退出

    :w - 保存
    :w !sudo tee % - 使用 sudo 保存当前文件
    :wq or :x or ZZ - 保存并退出
    :q - 退出(修改未保存时警告)
    :q! or ZQ - 不保存强制退出
    :wqa - write (save) and quit on all tabs

查找/替换

    /pattern - 查找pattern
    ?pattern - 向上查找pattern
    \vpattern - pattern 中的非字母数字字符被视为正则表达式特殊字符 (不需转义字符)
    n - 查找下一个
    N - 查找上一个
    :%s/old/new/g - 替换全部
    :%s/old/new/gc - (逐个)替换
    :noh - 移除搜索结果的高亮显示

多文件搜索

    :vimgrep /pattern/ {file} - 在多个文件中搜索 pattern

e.g. :vimgrep /foo/ **/*

    :cn - 移动至下一个
    :cp - 移动至上一个
    :copen - 打开搜索结果列表

多文件

    :e file - 新建缓冲区打开 filename
    :bnext or :bn - 切换到下个缓冲区
    :bprev or :bp - 切换到上个缓冲区
    :bd - 关闭缓冲区
    :ls - 列出所有打开的缓冲区
    :sp file - 新建缓冲区打开 filename 并水平分割窗口
    :vsp file - 新缓冲区打开 filename 并垂直分割窗口
    Ctrl + ws - 水平分割窗口
    Ctrl + ww - 在窗口间切换
    Ctrl + wq - 关闭窗口
    Ctrl + wv - 垂直分割窗口
    Ctrl + wh - 切换到右侧窗口
    Ctrl + wl - 切换到左侧窗口
    Ctrl + wj - 切换到下侧窗口
    Ctrl + wk - 切换到上侧窗口

标签

    :tabnew or :tabnew file - 在新标签中打开文件
    Ctrl + wT - 将窗口变成标签
    gt or :tabnext or :tabn - 切换到下一个标签
    gT or :tabprev or :tabp - 切换到上一个标签
    #gt - 切换到第 # 个标签
    :tabmove # - 移动标签到第 # 位(下标从 0 开始)
    :tabclose or :tabc - 关闭当前标签
    :tabonly or :tabo - 关闭其他标签
    :tabdo command - 在所有标签中执行命令 (例如 :tabdo q 关闭所有标签)
